#+TITLE: DotEmacs
#+AUTHOR: Mathieu Marques

* Table of Content                                                      :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#use-better-defaults][Use better defaults]]
  - [[#load-customel][Load =.custom.el=]]
  - [[#load-secretel][Load =.secret.el=]]
- [[#theme][Theme]]
- [[#languages][Languages]]
  - [[#css][CSS]]
  - [[#docker][Docker]]
  - [[#html][HTML]]
  - [[#javascript][JavaScript]]
  - [[#lisp][Lisp]]
  - [[#markdown][Markdown]]
  - [[#org][Org]]
  - [[#python][Python]]
  - [[#yaml][YAML]]
- [[#features][Features]]
  - [[#alert][Alert]]
  - [[#auto-completion][Auto-Completion]]
  - [[#comments][Comments]]
  - [[#customization-menus][Customization Menus]]
  - [[#dictionary][Dictionary]]
  - [[#diff][Diff]]
  - [[#dired][Dired]]
  - [[#expand][Expand]]
  - [[#exwm][EXWM]]
  - [[#folding][Folding]]
  - [[#helm][Helm]]
  - [[#helm-plugins][Helm Plugins]]
  - [[#help][Help]]
  - [[#hydra][Hydra]]
  - [[#irc][IRC]]
  - [[#linters][Linters]]
  - [[#mode-line][Mode-Line]]
  - [[#navigation][Navigation]]
  - [[#os-specific][OS-Specific]]
  - [[#parentheses][Parentheses]]
  - [[#paste][Paste]]
  - [[#point-and-region][Point and Region]]
  - [[#projectile][Projectile]]
  - [[#quality-of-life][Quality of Life]]
  - [[#slack][Slack]]
  - [[#terminal][Terminal]]
  - [[#version-control][Version Control]]
  - [[#whitespaces][Whitespaces]]
  - [[#windows][Windows]]

* Bootstrap

** Use better defaults

Enable fullscreen.

#+BEGIN_SRC emacs-lisp
(set-frame-parameter nil 'fullscreen 'fullboth)
#+END_SRC

Some UI elements are rather invasive. No-mouse master race.

#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0))                               ; Disable the tooltips
#+END_SRC

Here are what I consider better defaults as per my own experience.

#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%H:%M"                      ; Format the time string
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 left-margin-width 1 right-margin-width 1         ; Add left and right margins
 mode-require-final-newline 'visit                ; Add a newline at EOF on visit
 mouse-yank-at-point t                            ; Yank at point rather than pointer
 ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
 recenter-positions '(5 top bottom)               ; Set re-centering positions
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 scroll-margin 10                                 ; Add a margin when scrolling vertically
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-trailing-whitespace nil                     ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width
(delete-selection-mode)                           ; Replace region when inserting text
(display-time-mode)                               ; Enable time in the mode-line
(fringe-mode 0)                                   ; Hide fringes
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-hl-line-mode)                             ; Hightlight current line
(global-subword-mode)                             ; Iterate through CamelCase words
(menu-bar-mode 0)                                 ; Disable the menu bar
(mouse-avoidance-mode 'banish)                    ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
#+END_SRC

Garbage-collect on focus-out, Emacs /should/ feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

** Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. It
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Load =.secret.el=

I load =~/.emacs.d/.secret.el= to keep sensible things out of version control.
For instance, you could set your identity by customizing both =user-full-name=
and =user-mail-address=. This is also where you want your API tokens to live.

#+BEGIN_SRC emacs-lisp
(defvar me/erc-nick               nil       "The ERC nick to use.")
(defvar me/erc-password           nil       "The ERC password to use.")
(defvar me/erc-port               nil       "The ERC port to use.")
(defvar me/erc-server             nil       "The ERC server to use.")
(defvar me/font-family            "Monaco"  "The font to use.")
(defvar me/font-size-default      120       "The font size to use for default text.")
(defvar me/font-size-header-line  130       "The font size to use for the header-line.")
(defvar me/font-size-mode-line    120       "The font size to use for the mode-line.")
(defvar me/font-size-title        150       "The font size to use for titles.")

(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC

* Theme

The face for italic text is underlined when the font does not support slant by
default. I don't like it.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'italic nil :underline nil)
#+END_SRC

I don't like bold text, mostly because it looks like crap on Windows. Since
faces can be defined in every packages, I need to unboldify after that specfic
package has been loaded. That function should be called after the provided faces
have been defined.

#+BEGIN_SRC emacs-lisp
(defun me/unboldify (&optional faces)
  "Set the weight property of FACES to `normal'.
If FACES is not provided or nil, use `face-list' instead."
  (interactive)
  (mapc (lambda (face)
          (when (eq (face-attribute face :weight) 'bold)
            (set-face-attribute face nil :weight 'normal)))
        (or faces (face-list))))
#+END_SRC

Load =zenburn-theme= and fix some high-level faces to match my personal
preferences.

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :demand t
  :config
  (load-theme 'zenburn t)
  (set-face-attribute 'font-lock-comment-face nil :italic t)
  (set-face-attribute 'font-lock-doc-face nil :italic t)
  (zenburn-with-color-variables
    (set-face-attribute 'button nil :foreground zenburn-yellow-2)
    (set-face-attribute 'default nil
                        :height me/font-size-default
                        :font me/font-family)
    (set-face-attribute 'help-argument-name nil :foreground zenburn-orange :italic nil)
    (set-face-attribute 'hl-line nil :background zenburn-bg+1)
    (set-face-attribute 'header-line nil
                        :box `(:line-width 2 :color ,zenburn-bg-1)
                        :height me/font-size-header-line)
    (set-face-attribute 'mode-line nil
                        :box nil
                        :foreground zenburn-bg+3
                        :height me/font-size-mode-line)
    (set-face-attribute 'mode-line-inactive nil
                        :box nil
                        :foreground zenburn-bg+3
                        :height me/font-size-mode-line)
    (set-face-attribute 'region nil
                        :background zenburn-fg-1
                        :distant-foreground 'unspecified)
    (set-face-attribute 'vertical-border nil :foreground zenburn-bg))

  ;; NOTE: See https://github.com/bbatsov/zenburn-emacs/issues/278.
  (zenburn-with-color-variables
    (mapc
     (lambda (face)
       (when (eq (face-attribute face :background) zenburn-bg)
         (set-face-attribute face nil :background 'unspecified)))
     (face-list)))

  (me/unboldify '(font-lock-builtin-face
                  font-lock-keyword-face
                  font-lock-negation-char-face
                  font-lock-regexp-grouping-backslash
                  font-lock-regexp-grouping-construct
                  font-lock-warning-face
                  link
                  mode-line-buffer-id)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'fixed-pitch nil :font me/font-family)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package mdi
  :ensure nil
  :load-path "lisp/mdi/"
  :after zenburn-theme)
#+END_SRC

* Languages

As pedantic as I like to be, some packages have a =use-package= clause for
nothing but the customization of their lighter.

- *TODO*: Replace all old defadvice's.

** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :config (setq-default css-indent-offset 2))

(use-package scss-mode
  :ensure nil
  :preface
  (defun me/scss-set-comment-style ()
    (setq-local comment-end "")
    (setq-local comment-start "//"))
  :delight scss-mode "SCSS"
  :mode ("\\.css\\'" "\\.sass\\'" "\\.scss\\'")
  :init (add-hook 'scss-mode-hook #'me/scss-set-comment-style))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :delight dockerfile-mode "Dockerfile"
  :mode "Dockerfile\\'")
#+END_SRC

** HTML

HTML mode is defined in =sgml-mode.el=.

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :ensure nil
  :delight html-mode "HTML"
  :init
  (add-hook 'html-mode-hook #'sgml-electric-tag-pair-mode)
  (add-hook 'html-mode-hook #'sgml-name-8bit-mode)
  (add-hook 'html-mode-hook #'toggle-truncate-lines)
  :config (setq-default sgml-basic-offset 2))
#+END_SRC

** JavaScript

- *FIXME*: Indent level is broken
           (https://github.com/joshwnj/json-mode/issues/32).

#+BEGIN_SRC emacs-lisp
(use-package js
  :ensure nil
  :delight js-mode "JavaScript"
  :config (setq-default js-indent-level 2))

(use-package json-mode
  :delight json-mode "JSON"
  :mode "\\.json\\'"
  :preface
  (defun me/json-set-indent-level ()
    (setq-local js-indent-level 2))
  :init (add-hook 'json-mode-hook #'me/json-set-indent-level))

(use-package rjsx-mode
  :delight rjsx-mode "RJSX"
  :init (add-hook 'rjsx-mode-hook #'sgml-electric-tag-pair-mode))
#+END_SRC

Tern is a code-analysis engine for JavaScript. I use it to check syntax and
grammar in my JavaScript code. With an auto-complete frontend, it can also
provide candidates for variables and properties.

#+BEGIN_SRC emacs-lisp
(use-package tern
  :init (add-hook 'js-mode-hook #'tern-mode))
#+END_SRC

** Lisp

#+BEGIN_SRC emacs-lisp
(use-package emacs-lisp-mode
  :ensure nil
  :delight emacs-lisp-mode "Emacs Lisp"
  :config (delight 'lisp-interaction-mode "Lisp Interaction"))

(use-package ielm
  :ensure nil
  :init (add-hook 'ielm-mode-hook '(lambda () (setq-local scroll-margin 0))))

(use-package lisp-mode
  :ensure nil
  :delight lisp-mode "Lisp")
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :delight markdown-mode "Markdown"
  :mode
  ("INSTALL\\'"
   "CONTRIBUTORS\\'"
   "LICENSE\\'"
   "README\\'"
   "\\.markdown\\'"
   "\\.md\\'")
  :config
  (unbind-key "M-<down>" markdown-mode-map)
  (unbind-key "M-<up>" markdown-mode-map)
  (setq-default
    markdown-asymmetric-header t
    markdown-split-window-direction 'right))
#+END_SRC

** Org

This very file is organized with =org-mode=. I am definitely not a power user of
Org, but I'm getting there. :-)

#+BEGIN_QUOTE
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

[[http://orgmode.org/][Carsten Dominik]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :delight org-mode "Org"
  :preface
  (defun me/org-src-buffer-name (org-buffer-name language)
    "Construct the buffer name for a source editing buffer. See
`org-src--construct-edit-buffer-name'."
    (format "*%s*" org-buffer-name))
  (defun me/org-backward-paragraph-shifted ()
    "See `org-backward-paragraph'. Support shift."
    (interactive "^")
    (org-backward-paragraph))
  (defun me/org-forward-paragraph-shifted ()
    "See `org-forward-paragraph'. Support shift."
    (interactive "^")
    (org-forward-paragraph))
  :bind
  (:map org-mode-map
        ([remap backward-paragraph] . me/org-backward-paragraph-shifted)
        ([remap forward-paragraph] . me/org-forward-paragraph-shifted)
        ("<C-return>" . nil)
        ("<C-S-down>" . nil)
        ("<C-S-up>" . nil))
  :init
  (add-hook 'org-mode-hook #'org-sticky-header-mode)
  (add-hook 'org-mode-hook #'toc-org-enable)
  :config
  (setq-default
   org-descriptive-links nil
   org-support-shift-select 'always
   org-startup-folded nil
   org-startup-truncated nil)
  (advice-add 'org-src--construct-edit-buffer-name :override #'me/org-src-buffer-name))

(use-package org-faces
  :ensure nil
  :after org
  :config (me/unboldify '(org-tag)))

(use-package org-src
  :ensure nil
  :after org
  :config
  (setq-default
   org-edit-src-content-indentation 0
   org-edit-src-persistent-message nil
   org-src-window-setup 'current-window))
#+END_SRC

Display the current Org header in the header-line.

#+BEGIN_SRC emacs-lisp
(use-package org-sticky-header
  :config
  (setq-default
   org-sticky-header-full-path 'full
   org-sticky-header-outline-path-separator " / "))
#+END_SRC

Tired of having to manually update your tables of contents? This package will
maintain a TOC at the first heading that has a =:TOC:= tag.

#+BEGIN_SRC emacs-lisp
(use-package toc-org :after org)
#+END_SRC

** Python

- *TODO*: Fix for =ipython= 5.1.0.

#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :delight python-mode "Python"
  :config
  (when (executable-find "ipython")
    (setq-default
     python-shell-interpreter "ipython"
     python-shell-interpreter-args "--colors=Linux --profile=default"
     python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
     python-shell-prompt-regexp "In \\[[0-9]+\\]: "
     python-shell-completion-setup-code
     "from IPython.core.completerlib import module_completion"
     python-shell-completion-module-string-code
     "';'.join(module_completion('''%s'''))\n"
     python-shell-completion-string-code
     "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package pip-requirements
  :delight pip-requirements-mode "PyPA Requirements"
  :preface
  (defun me/pip-requirements-ignore-case ()
    (setq-local completion-ignore-case t))
  :init (add-hook 'pip-requirements-mode-hook #'me/pip-requirements-ignore-case))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :delight yaml-mode "YAML"
  :mode "\\.yml\\'")
#+END_SRC

* Features

** Alert

#+BEGIN_QUOTE
Alert is a Growl-workalike for Emacs which uses a common notification interface
and multiple, selectable "styles", whose use is fully customizable by the user.

[[https://github.com/jwiegley/alert][John Wiegley]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package alert
  :config
  (when (eq system-type 'darwin)
    (setq-default alert-default-style 'osx-notifier)))
#+END_SRC

** Auto-Completion

Auto-completion at point. Display a small pop-in containing the candidates.

#+BEGIN_QUOTE
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

[[http://company-mode.github.io/][Dmitry Gutov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 1
  :config
  (global-company-mode)
  (setq-default
   company-idle-delay .2
   company-minimum-prefix-length 1
   company-require-match nil
   company-tooltip-align-annotations t))

(use-package company-dabbrev
  :ensure nil
  :after company
  :config (setq-default company-dabbrev-downcase nil))

(use-package company-tern
  :after company
  :config
  (add-to-list 'company-backends 'company-tern)
  (setq-default
   company-tern-meta-as-single-line t
   company-tern-property-marker " *"))
#+END_SRC

** Comments

#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind ("<M-return>" . comment-indent-new-line)
  :config
  (setq-default
   comment-auto-fill-only-comments t
   comment-multi-line t))
#+END_SRC

** Customization Menus

This merely changes face attributes. It also /Zenburn/ customization buffers a
little more.

#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :ensure nil
  :config
  (set-face-attribute 'custom-group-tag nil
                      :font me/font-family
                      :height me/font-size-title)
  (zenburn-with-color-variables
    (set-face-attribute 'custom-state nil :foreground zenburn-green+4))
  (me/unboldify '(custom-variable-tag)))
#+END_SRC

** Dictionary

Define words using Wordnik.

#+BEGIN_SRC emacs-lisp
(use-package define-word)
#+END_SRC

** Diff

Ediff is a visual interface to Unix =diff=.

- *TODO*: Use =:bind=.

#+BEGIN_SRC emacs-lisp
(use-package ediff-util
  :ensure nil
  :preface
  (defun me/ediff-setup-keymap ()
    (ediff-setup-keymap)
    (define-key ediff-mode-map (kbd "<down>") #'ediff-next-difference)
    (define-key ediff-mode-map (kbd "<up>") #'ediff-previous-difference))
  :init (add-hook 'ediff-mode-hook #'me/ediff-setup-keymap))

(use-package ediff-wind
  :ensure nil
  :config
  (setq-default
   ediff-split-window-function #'split-window-horizontally
   ediff-window-setup-function #'ediff-setup-windows-plain))
#+END_SRC

- *TODO*: Make a pull request over https://github.com/bbatsov/zenburn-emacs.

#+BEGIN_SRC emacs-lisp
(use-package smerge-mode
  :ensure nil
  :config
  (zenburn-with-color-variables
    (set-face-attribute 'smerge-mine nil :background zenburn-red-2)
    (set-face-attribute 'smerge-other nil :background zenburn-green)
    (set-face-attribute 'smerge-refined-added nil :background zenburn-green-1)
    (set-face-attribute 'smerge-refined-removed nil :background zenburn-red-4)))
#+END_SRC

** Dired

Configure Dired buffers. Amongst many other things, Emacs is also a file
explorer.

- *TODO*: Use the new syntax for advices.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :delight dired-mode "Dired"
  :init (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  :config
  (defadvice dired-readin (after dired-after-updating-hook first () activate)
    "Sort dired listings with directories first before adding marks."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2)
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
      (set-buffer-modified-p nil)))
  (setq-default
   dired-auto-revert-buffer t
   dired-dwim-target t
   dired-hide-details-hide-symlink-targets nil
   dired-listing-switches "-alh"
   dired-ls-F-marks-symlinks nil
   dired-recursive-copies 'always))

(use-package dired-x
  :ensure nil
  :preface
  (defun me/dired-revert-after-command (command &optional output error)
    (revert-buffer))
  :config
  (advice-add 'dired-smart-shell-command :after #'me/dired-revert-after-command))
#+END_SRC

** Expand

HippieExpand manages expansions a la [[http://emmet.io/][Emmet]]. So I've
gathered all features that look anywhere close to this behavior for it to handle
under the same bind, that is =<C-return>=. Basically it's an expand DWIM.

- *TODO*: Use =:bind=.
- *TODO*: Move hook calls where they belong.

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :bind
  (:map emmet-mode-keymap
        ("<C-return>" . nil)
        ("C-M-<left>" . nil)
        ("C-M-<right>" . nil)
        ("C-c w" . nil))
  :init
  (add-hook 'css-mode-hook #'emmet-mode)
  (add-hook 'html-mode-hook #'emmet-mode)
  (add-hook 'rjsx-mode-hook #'emmet-mode)
  :config (setq-default emmet-move-cursor-between-quote t))

(use-package hippie-exp
  :ensure nil
  :preface
  (defun me/emmet-try-expand-line (args)
    "Try `emmet-expand-line' if `emmet-mode' is active. Else, does nothing."
     (interactive "P")
     (when emmet-mode (emmet-expand-line args)))
  :bind ("<C-return>" . hippie-expand)
  :config
  (setq-default
   hippie-expand-try-functions-list '(yas-hippie-try-expand me/emmet-try-expand-line)
   hippie-expand-verbose nil))

(use-package yasnippet
  :init
  (add-hook 'emacs-lisp-mode-hook #'yas-minor-mode)
  (add-hook 'html-mode-hook #'yas-minor-mode)
  (add-hook 'js-mode-hook #'yas-minor-mode)
  (add-hook 'org-mode-hook #'yas-minor-mode)
  (add-hook 'python-mode-hook #'yas-minor-mode)
  :config
  (setq-default yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-reload-all)
  (unbind-key "TAB" yas-minor-mode-map)
  (unbind-key "<tab>" yas-minor-mode-map))
#+END_SRC

** EXWM

- *TODO*

#+BEGIN_QUOTE
EXWM (Emacs X Window Manager) is a full-featured tiling X window manager for
Emacs built on top of [[https://github.com/ch11ng/xelb][XELB]]. It features:

- Fully keyboard-driven operations
- Hybrid layout modes (tiling & stacking)
- Dynamic workspace support
- ICCCM/EWMH compliance
- (Optional) RandR (multi-monitor) support
- (Optional) Built-in compositing manager
- (Optional) Built-in system tray
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package exwm :disabled t)
#+END_SRC

** Folding

#+BEGIN_QUOTE
This is a package to perform text folding like in Vim. It has the following features:

- folding of active regions;
- good visual feedback: it's obvious which part of text is folded;
- persistence by default: when you close file your folds don't disappear;
- persistence scales well, you can work on hundreds of files with lots of folds without
  adverse effects;
- it doesn't break indentation or something;
- folds can be toggled from folded state to unfolded and back very easily;
- quick navigation between existing folds;
- you can use mouse to unfold folds (good for beginners and not only for them);
- for fans of avy package: you can use avy to fold text with minimal number of
  key strokes!

[[https://github.com/mrkkrp/vimish-fold][Mark Karpov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
  :defer 1
  :bind
  (:map vimish-fold-folded-keymap ("<tab>" . vimish-fold-unfold)
   :map vimish-fold-unfolded-keymap ("<tab>" . vimish-fold-refold))
  :init
  (setq-default vimish-fold-dir (expand-file-name ".vimish-fold/" user-emacs-directory))
  (vimish-fold-global-mode)
  :config
  (setq-default vimish-fold-header-width 79))
#+END_SRC

** Helm

Helm is a beast. Although heavily, it replaces =ido-mode= in many ways.

#+BEGIN_QUOTE
=Helm= is an Emacs framework for incremental completions and narrowing
selections. It helps to rapidly complete file names, buffer names, or any other
Emacs interactions requiring selecting an item from a list of possible choices.

Helm is a fork of =anything.el=, which was originally written by Tamas Patrovic
and can be considered to be its successor. =Helm= cleans the legacy code that is
leaner, modular, and unchained from constraints of backward compatibility.

[[https://github.com/emacs-helm/helm][Bozhidar Batsov]]
#+END_QUOTE

- *TODO*: Add a flashing effect with Helm actions.
          =(progn (require 'pulse) (pulse-momentary-highlight-one-line (point))=
- *FIXME*: The recentering is too aggressive.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :defer 1
  :preface
  (defun me/recenter ()
    (recenter-top-bottom (car recenter-positions)))
  :config
  (helm-mode)
  (setq-default
   helm-always-two-windows t
   helm-display-header-line nil
   helm-split-window-default-side 'left)
  (add-hook 'helm-after-persistent-action-hook #'me/recenter)
  (add-hook 'helm-after-action-hook #'me/recenter)
  (set-face-attribute 'helm-action nil :underline nil)
  (set-face-attribute 'helm-match nil :background nil)
  (set-face-attribute 'helm-source-header nil
                      :box nil
                      :background nil
                      :height me/font-size-title)
  (zenburn-with-color-variables
    (set-face-attribute 'helm-prefarg nil :foreground zenburn-magenta))
  (me/unboldify '(helm-match helm-source-header)))
#+END_SRC

Helm sub-modules can be customized separately. Many basic Emacs commands have
their Helm equivalents.

- *TODO*: Do I actually want to split all of these?
- *TODO*: Help buffer resizes the frame when killed.

#+BEGIN_SRC emacs-lisp
(use-package helm-bookmarks
  :ensure nil
  :after helm
  :config
  ;; NOTE: See https://github.com/bbatsov/zenburn-emacs/pull/279.
  (set-face-attribute 'helm-bookmark-directory nil
                      :foreground 'unspecified
                      :inherit 'dired-directory))

(use-package helm-buffers
  :ensure nil
  :after helm
  :config
  (setq-default
   helm-buffers-fuzzy-matching t
   helm-buffer-max-length nil)
  (set-face-attribute 'helm-buffer-directory nil :inherit 'dired-directory)
  (set-face-attribute 'helm-non-file-buffer nil :inherit 'shadow)
  (zenburn-with-color-variables
    (set-face-attribute 'helm-buffer-size nil :foreground zenburn-fg-1))

  ;; NOTE: See https://github.com/bbatsov/zenburn-emacs/pull/279.
  (set-face-attribute 'helm-buffer-directory nil
                      :background 'unspecified
                      :foreground 'unspecified
                      :inherit 'dired-directory))

(use-package helm-color
  :ensure nil
  :after helm)

(use-package helm-command
  :ensure nil
  :after helm
  :bind ([remap execute-extended-command] . helm-M-x)
  :config
  (setq-default helm-M-x-fuzzy-match t)
  (zenburn-with-color-variables
    (set-face-attribute 'helm-M-x-key nil :foreground zenburn-orange :underline nil)))

(use-package helm-files
  :ensure nil
  :after helm
  :bind ([remap find-file] . helm-find-files)
  :config
  (setq-default
   helm-ff-no-preselect t
   helm-ff-skip-boring-files t
   helm-find-file-ignore-thing-at-point t)
  (me/unboldify '(helm-ff-directory helm-ff-symlink))

  ;; NOTE: See https://github.com/bbatsov/zenburn-emacs/pull/279.
  (zenburn-with-color-variables
    (set-face-attribute 'helm-ff-dotted-directory nil
                        :background nil
                        :foreground zenburn-fg-1)
    (set-face-attribute 'helm-ff-directory nil
                        :foreground 'unspecified
                        :inherit 'dired-directory)
    (set-face-attribute 'helm-ff-dirs nil
                        :foreground 'unspecified
                        :inherit 'dired-directory)))

(use-package helm-grep
  :ensure nil
  :after helm
  :config
  (zenburn-with-color-variables
    (set-face-attribute 'helm-grep-lineno nil :foreground zenburn-yellow-2)))

(use-package helm-misc
  :ensure nil
  :after helm
  :bind ([remap switch-to-buffer] . helm-buffers-list))

(use-package helm-lib
  :ensure nil
  :after helm
  :config (setq-default helm-help-full-frame nil))

(use-package helm-mode
  :ensure nil
  :after helm
  :config
  (setq-default
   helm-completion-in-region-fuzzy-match t
   helm-mode-fuzzy-match t))

(use-package helm-net
  :ensure nil
  :after helm
  :config (setq-default helm-net-prefer-curl (if (executable-find "curl") t nil)))

(use-package helm-org
  :ensure nil
  :after helm
  :config (setq-default helm-org-headings-fontify t))

(use-package helm-regexp
  :ensure nil
  :after helm
  :config
  (zenburn-with-color-variables
    (set-face-attribute 'helm-moccur-buffer nil :foreground zenburn-blue)))
#+END_SRC

** Helm Plugins

Fourth-party packages for Helm.

- *NOTE*: See https://github.com/ShingoFukuyama/helm-css-scss/issues/7.
- *NOTE*: See https://github.com/ShingoFukuyama/helm-swoop/issues/114.
- *TODO*: See https://github.com/bbatsov/zenburn-emacs/issues/220.

#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :after helm
  :bind
  (:map helm-ag-map
        ("<left>" . backward-char)
        ("<right>" . forward-char))
  :config (setq-default helm-ag-show-status-function nil))

(use-package helm-css-scss
  :after helm
  :config (setq-default helm-css-scss-split-direction 'split-window-horizontally))

(use-package helm-descbinds
  :after helm
  :config
  (helm-descbinds-mode)
  (setq-default helm-descbinds-window-style 'split-window))

(use-package helm-describe-modes
  :after helm
  :bind ([remap describe-mode] . helm-describe-modes))

(use-package helm-flycheck
  :after helm)

(use-package helm-projectile
  :after helm
  :config (helm-projectile-toggle 1))

(use-package helm-swoop
  :bind ([remap isearch-forward] . helm-swoop)
  :config
  (setq-default
   helm-swoop-move-to-line-cycle nil
   helm-swoop-speed-or-color t
   helm-swoop-split-direction 'split-window-horizontally)
  (set-face-attribute 'helm-swoop-target-word-face nil
                      :background 'unspecified
                      :foreground 'unspecified
                      :inherit 'isearch))
#+END_SRC

** Help

#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :bind
  (:map help-mode-map
        ("<" . help-go-back)
        (">" . help-go-forward)))
#+END_SRC

** Hydra

Hydra allows me to group binds together. It also shows a list of all implemented
commands in the eho area.

#+BEGIN_QUOTE
Once you summon the Hydra through the prefixed binding (the body + any one
head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head,
arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his
original purpose, calling his proper command. This makes the Hydra very
seamless, it's like a minor mode that disables itself auto-magically.

[[https://github.com/abo-abo/hydra][Oleh Krehel]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :bind
  ("C-c <tab>" . hydra-fold/body)
  ("C-c d" . hydra-dates/body)
  ("C-c e" . hydra-eyebrowse/body)
  ("C-c f" . hydra-flycheck/body)
  ("C-c g" . hydra-magit/body)
  ("C-c h" . hydra-helm/body)
  ("C-c o" . hydra-org/body)
  ("C-c p" . hydra-projectile/body)
  ("C-c s" . hydra-system/body)
  ("C-c w" . hydra-windows/body)
  :config (setq-default hydra-default-hint nil))
#+END_SRC

*** Dates

Group date-related commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-dates (:color blue)
  "
^
^Dates^             ^Insert^            ^Insert with time^
^─────^─────────────^──────^────────────^────────────────^──
_q_ quit            _d_ short           _D_ short
^^                  _i_ iso             _I_ iso
^^                  _l_ long            _L_ long
^^                  ^^                  ^^
"
  ("q" nil)
  ("d" me/date-short)
  ("D" me/date-short-with-time)
  ("i" me/date-iso)
  ("I" me/date-iso-with-time)
  ("l" me/date-long)
  ("L" me/date-long-with-time))
#+END_SRC

[[./screenshots/hydra.dates.png]]

*** Eyebrowse

Group Eyebrowse commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-eyebrowse (:color blue)
  "
^
^Eyebrowse^         ^Do^                ^Switch^
^─────────^─────────^──^────────────────^──────^────────────
_q_ quit            _c_ create          _<_ previous
^^                  _k_ kill            _>_ next
^^                  _r_ rename          _e_ last
^^                  ^^                  _s_ switch
^^                  ^^                  ^^
"
  ("q" nil)
  ("<" eyebrowse-prev-window-config :color red)
  (">" eyebrowse-next-window-config :color red)
  ("c" eyebrowse-create-window-config)
  ("e" eyebrowse-last-window-config)
  ("k" eyebrowse-close-window-config :color red)
  ("r" eyebrowse-rename-window-config)
  ("s" eyebrowse-switch-to-window-config))
#+END_SRC

[[./screenshots/hydra.eyebrowse.png]]

*** Flycheck

Group Flycheck commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-flycheck (:color blue)
  "
^
^Flycheck^          ^Errors^            ^Checker^
^────────^──────────^──────^────────────^───────^───────────
_q_ quit            _<_ previous        _?_ describe
_m_ manual          _>_ next            _d_ disable
_v_ verify setup    _f_ check           _s_ select
^^                  ^^                  ^^
"
  ("q" nil)
  ("<" flycheck-previous-error :color red)
  (">" flycheck-next-error :color red)
  ("?" flycheck-describe-checker)
  ("d" flycheck-disable-checker)
  ("f" flycheck-buffer)
  ("m" flycheck-manual)
  ("s" flycheck-select-checker)
  ("v" flycheck-verify-setup))
#+END_SRC

[[./screenshots/hydra.flycheck.png]]

*** Fold

Group folding commands.

- *TODO*: Use =:bind=.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-fold (:color pink)
  "
^
^Fold^              ^Do^                ^Jump^              ^Toggle^
^────^──────────────^──^────────────────^────^──────────────^──────^────────────
_q_ quit            _f_ fold            _<_ previous        _<tab>_ current
^^                  _k_ kill            _>_ next            _S-<tab>_ all
^^                  _K_ kill all        ^^                  ^^
^^                  ^^                  ^^                  ^^
"
  ("q" nil)
  ("<tab>" vimish-fold-toggle)
  ("S-<tab>" vimish-fold-toggle-all)
  ("<" vimish-fold-previous-fold)
  (">" vimish-fold-next-fold)
  ("f" vimish-fold)
  ("k" vimish-fold-delete)
  ("K" vimish-fold-delete-all))
#+END_SRC

[[./screenshots/hydra.fold.png]]

*** Helm

Group Helm commands.

- *TODO*: Make =helm-mdi=.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-helm (:color blue)
  "
^
^Helm^              ^Browse^            ^Do^
^────^──────────────^──────^────────────^──^────────────────
_q_ quit            _c_ colors          _f_ flycheck
_r_ resume          _g_ google          _s_ css-scss
^^                  _i_ imenu           ^^
^^                  _k_ kill-ring       ^^
^^                  ^^                  ^^
"
  ("q" nil)
  ("c" helm-colors)
  ("f" helm-flycheck)
  ("g" helm-google-suggest)
  ("i" helm-imenu)
  ("k" helm-show-kill-ring)
  ("r" helm-resume)
  ("s" helm-css-scss))
#+END_SRC

[[./screenshots/hydra.helm.png]]

*** Magit

Group Magit commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-magit (:color blue)
  "
^
^Magit^             ^Do^
^─────^─────────────^──^────────────────
_q_ quit            _b_ blame
^^                  _c_ clone
^^                  _i_ init
^^                  _s_ status
^^                  ^^
"
  ("q" nil)
  ("b" magit-blame)
  ("c" magit-clone)
  ("i" magit-init)
  ("s" magit-status))
#+END_SRC

[[./screenshots/hydra.magit.png]]

*** Org

Group Org commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-org (:color pink)
  "
^
^Org^               ^Links^             ^Outline^
^───^───────────────^─────^─────────────^───────^───────────
_q_ quit            _i_ insert          _<_ previous
^^                  _n_ next            _>_ next
^^                  _p_ previous        _a_ all
^^                  _s_ store           _o_ goto
^^                  ^^                  _v_ overview
^^                  ^^                  ^^
"
  ("q" nil)
  ("<" org-backward-element)
  (">" org-forward-element)
  ("a" outline-show-all)
  ("i" org-insert-link :color blue)
  ("n" org-next-link)
  ("o" helm-org-in-buffer-headings :color blue)
  ("p" org-previous-link)
  ("s" org-store-link)
  ("v" org-overview))
#+END_SRC

[[./screenshots/hydra.org.png]]

*** Projectile

Group Projectile commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-projectile (:color blue)
  "
^
^Projectile^        ^Buffers^           ^Find^              ^Search^
^──────────^────────^───────^───────────^────^──────────────^──────^────────────
_q_ quit            _b_ list            _d_ directory       _r_ replace
_i_ reset cache     _K_ kill all        _D_ root            _R_ regexp replace
^^                  _S_ save all        _f_ file            _s_ ag
^^                  ^^                  _p_ project         ^^
^^                  ^^                  ^^                  ^^
"
  ("q" nil)
  ("b" helm-projectile-switch-to-buffer)
  ("d" helm-projectile-find-dir)
  ("D" projectile-dired)
  ("f" helm-projectile-find-file)
  ("i" projectile-invalidate-cache :color red)
  ("K" projectile-kill-buffers)
  ("p" helm-projectile-switch-project)
  ("r" projectile-replace)
  ("R" projectile-replace-regexp)
  ("s" helm-projectile-ag)
  ("S" projectile-save-project-buffers))
#+END_SRC

[[./screenshots/hydra.projectile.png]]

*** System

Group system-related commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-system (:color blue)
  "
^
^System^            ^Packages^          ^Processes^
^──────^────────────^────────^──────────^─────────^─────────
_q_ quit            _p_ list            _s_ list
^^                  _P_ upgrade         ^^
^^                  ^^                  ^^
"
  ("q" nil)
  ("p" paradox-list-packages)
  ("P" paradox-upgrade-packages)
  ("s" list-processes))
#+END_SRC

[[./screenshots/hydra.system.png]]

*** Windows

Group window-related commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-windows (:color pink)
  "
^
^Windows^           ^Window^            ^Zoom^
^───────^───────────^──────^────────────^────^──────────────
_q_ quit            _i_ enlarge         _-_ zoom out
^^                  _j_ shrink          _+_ zoom in
^^                  _k_ widen           _=_ reset
^^                  _l_ tighten         ^^
^^                  ^^                  ^^
"
  ("q" nil)
  ("i" enlarge-window)
  ("j" shrink-window-horizontally)
  ("k" shrink-window)
  ("l" enlarge-window-horizontally)
  ("-" text-scale-decrease)
  ("+" text-scale-increase)
  ("=" (text-scale-increase 0)))
#+END_SRC

[[./screenshots/hydra.windows.png]]

** IRC

- *TODO*: Display the current count of users. =(hash-table-count erc-channel-users)=
- *FIXME*: =erc-buffer-visible= comes from =erc-track.el=.

#+BEGIN_SRC emacs-lisp
(use-package erc
  :ensure nil
  :preface
  (defun me/erc ()
    "Connect to `me/erc-server' on `me/erc-port' as `me/erc-nick' with
    `me/erc-password'."
    (interactive)
    (erc :server me/erc-server
         :port me/erc-port
         :nick me/erc-nick
         :password me/erc-password))
  (defun me/erc-bol-shifted ()
    "See `erc-bol'. Support shift."
    (interactive "^")
    (erc-bol))
  (defun me/erc-set-fill-column ()
    "Set `erc-fill-column' to the width of the current window."
    (save-excursion
      (walk-windows
       (lambda (window)
         (let ((buffer (window-buffer window)))
           (set-buffer buffer)
           (when (and (eq major-mode 'erc-mode) (erc-buffer-visible buffer))
             (setq erc-fill-column (1- (window-width window)))))))))
  :bind
  (:map erc-mode-map
        ([remap erc-bol] . me/erc-bol-shifted)
        ("M-<down>" . erc-next-command)
        ("M-<up>" . erc-previous-command))
  :init
  (add-hook 'erc-mode-hook '(lambda () (setq-local scroll-margin 0)))
  (add-hook 'window-configuration-change-hook #'me/erc-set-fill-column)
  (me/erc)
  :config
  (make-variable-buffer-local 'erc-fill-column)
  (erc-scrolltobottom-enable)
  (setq-default
   erc-autojoin-channels-alist '(("freenode.net" "#emacs"))
   erc-fill-function 'erc-fill-static
   erc-fill-static-center 19
   erc-header-line-format " %n on %t %m"
   erc-insert-timestamp-function 'erc-insert-timestamp-left
   erc-lurker-hide-list '("JOIN" "PART" "QUIT")
   erc-prompt (format "%18s" ">")
   erc-timestamp-format nil)
  (set-face-attribute 'erc-button nil :inherit 'button)
  (set-face-attribute 'erc-prompt-face nil :background nil)
  (zenburn-with-color-variables
    (set-face-attribute 'erc-timestamp-face nil :foreground zenburn-fg-1))
  (me/unboldify '(erc-button
                  erc-nick-default-face
                  erc-my-nick-face
                  erc-my-nick-prefix-face
                  erc-nick-prefix-face
                  erc-prompt-face)))

(use-package erc-match
  :ensure nil
  :config (me/unboldify '(erc-current-nick-face)))
#+END_SRC

Colorize nicks with unique colors.

- *FIXME*: Pastel'ize the colors.

#+BEGIN_SRC emacs-lisp
(use-package erc-hl-nicks :after erc)
#+END_SRC

Keep track of ERC buffers in which new messages have been posted.

- *TODO*: Filter and track only the actual messages.

#+BEGIN_SRC emacs-lisp
(use-package erc-track
  :ensure nil
  :after erc)
#+END_SRC

** Linters

Flycheck lints warnings and errors directly within buffers. It can check a lot
of different syntaxes, as long as you make sure that Emacs has access to the
binaries (see [[./README.org][README.org]]).

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (add-hook 'css-mode-hook #'flycheck-mode)
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)
  (add-hook 'js-mode-hook #'flycheck-mode)
  (add-hook 'python-mode-hook #'flycheck-mode)
  :config
  (setq-default
   flycheck-check-syntax-automatically '(save mode-enabled)
   flycheck-disabled-checkers '(emacs-lisp-checkdoc)
   flycheck-display-errors-delay .3)
  (zenburn-with-color-variables
    (set-face-attribute 'flycheck-error nil :underline zenburn-red)
    (set-face-attribute 'flycheck-info nil :underline zenburn-blue+1)
    (set-face-attribute 'flycheck-warning nil :underline zenburn-orange)
    (set-face-attribute 'flycheck-fringe-error nil :foreground zenburn-red)
    (set-face-attribute 'flycheck-fringe-info nil :foreground zenburn-blue+1)
    (set-face-attribute 'flycheck-fringe-warning nil :foreground zenburn-orange)))
#+END_SRC

** Mode-Line

*** Screenshots

- *TODO*: Update screenshots and documentation.

Here is how it looks (slightly deprecating):

/In an active window/

[[./screenshots/emacs.mode-line.active.png]]

/In an inactive window/

[[./screenshots/emacs.mode-line.inactive.png]]

/When inside of a Helm session/

[[./screenshots/emacs.mode-line.helm.png]]

/When using isearch/

[[./screenshots/emacs.mode-line.search.png]]

/With an active region/

[[./screenshots/emacs.mode-line.region.png]]

- Green means buffer is clean.
- Red means buffer is modified.
- Blue means buffer is read-only.
- Colored bullets represent =flycheck= critical, warning and informational
  errors.
- The segment next to the clock indicate the current perspective from
  =eyebrowse=.

*** Delight

Delight allows you to change modes --- both major and minor --- lighters. They
are the descriptive strings than you see appear within the =mode-line=.

To make it work with =spaceline= (which uses =powerline= internally), I need to
allow it to use the newly changed strings.

- *TODO*: Use the new syntax for advices.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure nil
  :config
  (defadvice powerline-major-mode (around delight-powerline-major-mode activate)
    (let ((inhibit-mode-name-delight nil)) ad-do-it))
  (defadvice powerline-minor-modes (around delight-powerline-minor-modes activate)
    (let ((inhibit-mode-name-delight nil)) ad-do-it)))
#+END_SRC

*** Spaceline

Spaceline, is a mode-line configuration framework. Like what =powerline= does
but at a shallower level. It's still very customizable nonetheless.

#+BEGIN_QUOTE
This is the package that provides [[http://spacemacs.org/][Spacemacs]] with its
famous mode-line theme. It has been extracted as an independent package for
general fun and profit.

[[https://github.com/TheBB/spaceline][Eivind Fonn]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :demand t
  :config

  (spaceline-define-segment me/erc-track
    "Show the ERC buffers with new messages."
    (when (bound-and-true-p erc-track-mode)
      (mapcar (lambda (buffer)
                (format "%s%s%s"
                        (buffer-name (pop buffer))
                        erc-track-showcount-string
                        (pop buffer)))
              erc-modified-channels-alist)))

  (spaceline-define-segment me/helm-follow
    "Show `helm-follow-mode' status."
    (if (and (bound-and-true-p helm-alive-p)
             spaceline--helm-current-source
             (eq 1 (cdr (assq 'follow spaceline--helm-current-source))))
        (propertize (mdi "eye") 'face 'success)
      (propertize (mdi "eye-off") 'face 'warning)))

  (spaceline-define-segment me/selection-info
    "Show the size of current region."
    (when mark-active
      (let ((characters (- (region-end) (region-beginning)))
            (rows (count-lines (region-beginning) (min (1+ (region-end)) (point-max))))
            (columns (1+ (abs (- (spaceline--column-number-at-pos (region-end))
                                 (spaceline--column-number-at-pos (region-beginning)))))))
        (cond
         ((bound-and-true-p rectangle-mark-mode)
          (format "%d%s%d" (1- columns) (mdi "arrow-expand-all" t) rows))
         ((> rows 1)
          (format "%d" (if (eq (current-column) 0) (1- rows) rows)))
         (t (format "%d" characters))))))

  (spaceline-define-segment me/version-control
    "Show the current version control branch."
    (when vc-mode
      (substring vc-mode (+ 2 (length (symbol-name (vc-backend buffer-file-name))))))))
#+END_SRC

- *FIXME*: Projectile segment doesn't use submodules.

#+BEGIN_SRC emacs-lisp
(use-package spaceline-config
  :ensure nil
  :after spaceline
  :config

  ;; Configure the mode-line
  (setq-default
   mode-line-format '("%e" (:eval (spaceline-ml-main)))
   powerline-default-separator 'wave
   powerline-height 20
   spaceline-highlight-face-func 'spaceline-highlight-face-modified
   spaceline-flycheck-bullet (format "%s %s" (mdi "record") "%s")
   spaceline-separator-dir-left '(left . left)
   spaceline-separator-dir-right '(right . right))
  (spaceline-helm-mode)

  ;; Build the mode-lines
  (spaceline-install
    `((major-mode :face highlight-face)
      ((remote-host buffer-id line) :separator ":")
      (anzu))
    `((me/selection-info)
      (me/erc-track :face spaceline-highlight-face :when active)
      ((flycheck-error flycheck-warning flycheck-info))
      ((projectile-root me/version-control) :separator (mdi "source-branch" t))
      (workspace-number)
      (global :face highlight-face)))
  (spaceline-install
    'helm
    '((helm-buffer-id :face spaceline-read-only)
      (helm-number)
      (me/helm-follow)
      (helm-prefix-argument))
    '((me/erc-track :face spaceline-highlight-face :when active)
      (workspace-number)
      (global :face spaceline-read-only)))

  ;; Customize the mode-line
  (zenburn-with-color-variables
    (set-face-attribute 'powerline-active2 nil :background zenburn-bg+05)
    (set-face-attribute 'powerline-inactive2 nil :background zenburn-bg)
    (set-face-attribute 'spaceline-flycheck-error nil :foreground zenburn-red)
    (set-face-attribute 'spaceline-flycheck-info nil :foreground zenburn-blue+1)
    (set-face-attribute 'spaceline-flycheck-warning nil :foreground zenburn-orange)
    (set-face-attribute 'spaceline-highlight-face nil
                        :background zenburn-yellow
                        :foreground zenburn-fg-1)
    (set-face-attribute 'spaceline-modified nil
                        :background zenburn-red
                        :foreground zenburn-red-4)
    (set-face-attribute 'spaceline-read-only nil
                        :background zenburn-blue+1
                        :foreground zenburn-blue-5)
    (set-face-attribute 'spaceline-unmodified nil
                        :background zenburn-green-1
                        :foreground zenburn-green+4)))
#+END_SRC

** Navigation

*** Inline

Smarter =C-a=.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap move-beginning-of-line] 'me/beginning-of-line-dwim)

(defun me/beginning-of-line-dwim ()
  "Move point to first non-whitespace character, or beginning of line."
  (interactive "^")
  (let ((origin (point)))
    (beginning-of-line)
    (and (= origin (point))
         (back-to-indentation))))
#+END_SRC

*** Paragraphs

I disagree with Emacs' definition of paragraphs so I redefined the way it should
jump from one paragraph to another.

- *FIXME*: Ignore invisible text.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap backward-paragraph] 'me/backward-paragraph-dwim)
(global-set-key [remap forward-paragraph] 'me/forward-paragraph-dwim)

(defun me/backward-paragraph-dwim ()
  "Move backward to start of paragraph."
  (interactive "^")
  (skip-chars-backward "\n")
  (unless (search-backward-regexp "\n[[:blank:]]*\n" nil t)
    (goto-char (point-min)))
  (skip-chars-forward "\n"))

(defun me/forward-paragraph-dwim ()
  "Move forward to start of next paragraph."
  (interactive "^")
  (skip-chars-forward "\n")
  (unless (search-forward-regexp "\n[[:blank:]]*\n" nil t)
    (goto-char (point-max)))
  (skip-chars-forward "\n"))
#+END_SRC

*** Replace

Better search and replace features. Even though I prefer to use
=multiple-cursors= to replace text in different places at once, =anzu= has a
nice feedback on regexp matches.

#+BEGIN_QUOTE
=anzu.el= is an Emacs port of
[[https://github.com/osyo-manga/vim-anzu][anzu.vim]]. =anzu.el= provides a minor
mode which displays /current match/ and /total matches/ information in the
mode-line in various search modes.

[[https://github.com/syohex/emacs-anzu][Syohei Yoshida]]
#+END_QUOTE

/Regular replace/

[[./screencasts/emacs.anzu-replace.gif]]

/Regexp replace/

[[./screencasts/emacs.anzu-replace-regexp.gif]]

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :defer 1
  :bind ([remap query-replace] . anzu-query-replace-regexp)
  :config
  (global-anzu-mode)
  (setq-default
   anzu-cons-mode-line-p nil
   anzu-replace-to-string-separator (mdi "arrow-right" t))
  (zenburn-with-color-variables
    (set-face-attribute 'anzu-replace-highlight nil
                        :background zenburn-red-4
                        :foreground zenburn-red+1)
    (set-face-attribute 'anzu-replace-to nil
                        :background zenburn-green-1
                        :foreground zenburn-green+4))
  (me/unboldify '(anzu-mode-line anzu-mode-line-no-match)))
#+END_SRC

*** Scroll

Enable horizontal scroll.

- *TODO*: Scroll the window under cursor instead of where point is.

#+BEGIN_SRC emacs-lisp
(put 'scroll-left 'disabled nil)
(defun me/scroll-left ()
  (interactive)
  (when truncate-lines (scroll-left 2)))
(defun me/scroll-right ()
  (interactive)
  (when truncate-lines (scroll-right 2)))
(global-set-key (kbd "<wheel-left>") #'me/scroll-right)
(global-set-key (kbd "<wheel-right>") #'me/scroll-left)
#+END_SRC

Configure the mouse scroll.

#+BEGIN_SRC emacs-lisp
(use-package mwheel
  :ensure nil
  :config
  (setq-default
   mouse-wheel-progressive-speed nil
   mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control)))))
#+END_SRC

*** Search

Isearch stands for /incremental search/. This means that search results are
highlighted while you are typing your query, incrementally. Since he who can do
more can do less, I've replaced default bindings with the regexp-equivalent
commands.

#+BEGIN_SRC emacs-lisp
(use-package isearch
  :ensure nil
  :bind
  (("C-S-r" . isearch-backward-regexp)
   ("C-S-s" . isearch-forward-regexp)
   :map isearch-mode-map
   ("<M-down>" . isearch-ring-advance)
   ("<M-up>" . isearch-ring-retreat)
   :map minibuffer-local-isearch-map
   ("<M-down>" . next-history-element)
   ("<M-up>" . previous-history-element))
  :init
  (setq-default
   isearch-allow-scroll t
   lazy-highlight-cleanup nil
   lazy-highlight-initial-delay 0)
  (zenburn-with-color-variables
    (set-face-attribute 'isearch nil
                        :background zenburn-blue
                        :foreground zenburn-blue-5)
    (set-face-attribute 'isearch-lazy-highlight-face nil
                        :background zenburn-blue-5
                        :foreground zenburn-blue))
  (me/unboldify '(isearch lazy-highlight)))
#+END_SRC

** OS-Specific

Augment Emacs experience for MacOS users.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq-default
   exec-path (append exec-path '("/usr/local/bin"))  ; Add Homebrew path
   ns-command-modifier 'meta                         ; Map Meta to the Cmd key
   ns-option-modifier 'super                         ; Map Super to the Alt key
   ns-right-option-modifier nil))                    ; Disable the right Alt key
#+END_SRC

Initialize environment variables.

#+BEGIN_QUOTE
Ever find that a command works in your shell, but not in Emacs?

This happens a lot on OS X, where an Emacs instance started from the GUI
inherits a default set of environment variables.

This library works solves this problem by copying important environment
variables from the user's shell: it works by asking your shell to print out the
variables of interest, then copying them into the Emacs environment.

[[https://github.com/purcell/exec-path-from-shell][Steve Purcell]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :defer 1
  :config (exec-path-from-shell-initialize))
#+END_SRC

** Parentheses

Highlight parenthese-like delimiters in a rainbow fashion. It ease the reading
when dealing with mismatched parentheses.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  :config
  (zenburn-with-color-variables
    (set-face-attribute 'rainbow-delimiters-mismatched-face nil
                        :foreground zenburn-red-4)
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground zenburn-red-4)))
#+END_SRC

I am still looking for the perfect parenthesis management setup as of
today... No package seem to please my person.

- *TODO*: Find a better parenthese management package.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :defer 1
  :bind
  (("M-<backspace>" . sp-unwrap-sexp)
   ("M-<left>" . sp-forward-barf-sexp)
   ("M-<right>" . sp-forward-slurp-sexp)
   ("M-S-<left>" . sp-backward-slurp-sexp)
   ("M-S-<right>" . sp-backward-barf-sexp))
  :config
  (require 'smartparens-config)
  (smartparens-global-mode)
  (sp-pair "{{" "}}")
  (sp-pair "[[" "]]"))
#+END_SRC

** Paste

#+BEGIN_SRC emacs-lisp
(use-package webpaste)
#+END_SRC

** Point and Region

Increase region by semantic units. It tries to be smart about it and adapt to
the structure of the current major mode.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("C-+" . er/contract-region)
  ("C-=" . er/expand-region))
#+END_SRC

Enable multiple cursors at once. Some witchcraft at work here.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :defer 1
  :bind
  (("C-S-<mouse-1>" . mc/add-cursor-on-click)
   ("C-S-c C-S-a" . mc/vertical-align-with-space)
   ("C-S-c C-S-c" . mc/edit-lines)
   ("C-S-c C-S-l" . mc/insert-letters)
   ("C-S-c C-S-n" . mc/insert-numbers)
   ("C-'" . mc-hide-unmatched-lines-mode))
  :init
  (setq-default
   mc/list-file (expand-file-name ".multiple-cursors.el" user-emacs-directory))
  :config
  (setq-default
   mc/edit-lines-empty-lines 'ignore
   mc/insert-numbers-default 1))
#+END_SRC

Enable new custom binds when region is active. I've also added a few helpers to
use with =selected=.

#+BEGIN_SRC emacs-lisp
(use-package selected
  :defer 1
  :bind
  (:map selected-keymap
        ("<"           . mc/mark-previous-like-this)
        (">"           . mc/mark-next-like-this)
        ("C-<"         . mc/unmark-previous-like-this)
        ("C->"         . mc/unmark-next-like-this)
        ("C-M-<"       . mc/skip-to-previous-like-this)
        ("C-M->"       . mc/skip-to-next-like-this)
        ("C-?"         . hydra-selected/body)
        ("C-c C-c"     . me/eval-region-and-kill-mark)
        ("C-b"         . me/browse-url-and-kill-mark)
        ("C-c c"       . capitalize-region)
        ("C-c k"       . me/kebab-region)
        ("C-c l"       . downcase-region)
        ("C-c u"       . upcase-region)
        ("C-d"         . define-word-at-point)
        ("C-f"         . fill-region)
        ("C-g"         . selected-off)
        ("C-p"         . webpaste-paste-region)
        ("C-s r"       . reverse-region)
        ("C-s s"       . sort-lines)
        ("C-s w"       . me/sort-words)
        ("<M-left>"    . me/indent-rigidly-left-and-keep-mark)
        ("<M-right>"   . me/indent-rigidly-right-and-keep-mark)
        ("<M-S-left>"  . me/indent-rigidly-left-tab-and-keep-mark)
        ("<M-S-right>" . me/indent-rigidly-right-tab-and-keep-mark))
  :config (selected-global-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun me/eval-region-and-kill-mark (beg end)
  "Execute the region as Lisp code.
Call `eval-region' and kill mark. Move back to the beginning of the region."
  (interactive "r")
  (eval-region beg end)
  (setq deactivate-mark t)
  (goto-char beg))

(defun me/browse-url-and-kill-mark (url &rest args)
  "Ask a WWW browser to load URL.
Call `browse-url' and kill mark."
  (interactive (browse-url-interactive-arg "URL: "))
  (apply #'browse-url url args)
  (setq deactivate-mark t))

(defun me/indent-rigidly-left-and-keep-mark (beg end)
  "Indent all lines between BEG and END leftward by one space.
Call `indent-rigidly-left' and keep mark."
  (interactive "r")
  (indent-rigidly-left beg end)
  (setq deactivate-mark nil))

(defun me/indent-rigidly-right-and-keep-mark (beg end)
  "Indent all lines between BEG and END rightward by one space.
Call `indent-rigidly-right' and keep mark."
  (interactive "r")
  (indent-rigidly-right beg end)
  (setq deactivate-mark nil))

(defun me/indent-rigidly-left-tab-and-keep-mark (beg end)
  "Indent all lines between BEG and END leftward to a tab stop.
Call `indent-rigidly-left-to-tab-stop' and keep mark."
  (interactive "r")
  (indent-rigidly-left-to-tab-stop beg end)
  (setq deactivate-mark nil))

(defun me/indent-rigidly-right-tab-and-keep-mark (beg end)
  "Indent all lines between BEG and END rightward to a tab stop.
Call `indent-rigidly-right-to-tab-stop' and keep mark."
  (interactive "r")
  (indent-rigidly-right-to-tab-stop beg end)
  (setq deactivate-mark nil))

(defun me/kebab-region (begin end)
  "Convert region to kebab-case."
  (interactive "r")
  (downcase-region begin end)
  (save-excursion
    (perform-replace " +" "-" nil t nil nil nil begin end)))

(defun me/sort-words (reverse beg end)
  "Sort words in region alphabetically, in REVERSE if negative.
Prefixed with negative \\[universal-argument], sorts in reverse.

The variable `sort-fold-case' determines whether alphabetic case
affects the sort order.

See `sort-regexp-fields'."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\w+" "\\&" beg end))
#+END_SRC

Work on lines.

- *TODO*: Handle regions.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<M-S-up>") 'me/duplicate-backward)
(global-set-key (kbd "<M-S-down>") 'me/duplicate-forward)
(global-set-key (kbd "<M-down>") 'me/swap-line-down)
(global-set-key (kbd "<M-up>") 'me/swap-line-up)

(defun me/duplicate-line (&optional stay)
  "Duplicate current line.
With optional argument STAY true, leave point where it was."
  (save-excursion
    (move-end-of-line nil)
    (save-excursion
      (insert (buffer-substring (point-at-bol) (point-at-eol))))
    (newline))
  (unless stay
    (let ((column (current-column)))
      (forward-line)
      (forward-char column))))

(defun me/duplicate-backward ()
  "Duplicate current line upward or region backward.
If region was active, keep it so that the command can be repeated."
  (interactive)
  (if (region-active-p)
      (let (deactivate-mark)
        (save-excursion
          (insert (buffer-substring (region-beginning) (region-end)))))
    (me/duplicate-line t)))

(defun me/duplicate-forward ()
  "Duplicate current line downward or region forward.
If region was active, keep it so that the command can be repeated."
  (interactive)
  (if (region-active-p)
      (let (deactivate-mark (point (point)))
        (insert (buffer-substring (region-beginning) (region-end)))
        (push-mark point))
    (me/duplicate-line)))

(defun me/swap-line-down ()
  "Move down the line under point."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun me/swap-line-up ()
  "Move up the line under point."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))
#+END_SRC

** Projectile

Projectile brings project-level facilities to Emacs such as grep, find and
replace.

#+BEGIN_QUOTE
Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

[[https://github.com/bbatsov/projectile][Bozhidar Batsov]]
#+END_QUOTE

- *TODO*: Use the new syntax for advices.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer 1
  :init
  (setq-default
   projectile-cache-file (expand-file-name ".projectile-cache" user-emacs-directory)
   projectile-keymap-prefix (kbd "C-c C-p")
   projectile-known-projects-file (expand-file-name
                                   ".projectile-bookmarks" user-emacs-directory))
  :config
  (projectile-global-mode)
  (setq-default
   projectile-completion-system 'helm
   projectile-enable-caching t
   projectile-mode-line '(:eval (projectile-project-name))))
#+END_SRC

** Quality of Life

Auto-indent code as you write.

#+BEGIN_QUOTE
=electric-indent-mode= is enough to keep your code nicely aligned when all you
do is type. However, once you start shifting blocks around, transposing lines,
or slurping and barfing sexps, indentation is bound to go wrong.

=aggressive-indent-mode= is a minor mode that keeps your code *always* indented.
It reindents after every change, making it more reliable than
electric-indent-mode.

[[https://github.com/Malabarba/aggressive-indent-mode][Artur Malabarba]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :init
  (add-hook 'css-mode-hook #'aggressive-indent-mode)
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'js-mode-hook #'aggressive-indent-mode)
  (add-hook 'lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'sgml-mode-hook #'aggressive-indent-mode)
  :config (setq-default aggressive-indent-comments-too t))
#+END_SRC

Auto-dim other buffers. Pretty self-explanatory.

#+BEGIN_SRC emacs-lisp
(use-package auto-dim-other-buffers
  :init (auto-dim-other-buffers-mode)
  :config
  (zenburn-with-color-variables
    (set-face-attribute 'auto-dim-other-buffers-face nil :background zenburn-bg-1)))
#+END_SRC

Insert the current date.

#+BEGIN_SRC emacs-lisp
(defun me/date-iso ()
  "Insert the current date, ISO format, eg. 2016-12-09."
  (interactive)
  (insert (format-time-string "%F")))

(defun me/date-iso-with-time ()
  "Insert the current date, ISO format with time, eg. 2016-12-09T14:34:54+0100."
  (interactive)
  (insert (format-time-string "%FT%T%z")))

(defun me/date-long ()
  "Insert the current date, long format, eg. December 09, 2016."
  (interactive)
  (insert (format-time-string "%B %d, %Y")))

(defun me/date-long-with-time ()
  "Insert the current date, long format, eg. December 09, 2016 - 14:34."
  (interactive)
  (insert (capitalize (format-time-string "%B %d, %Y - %H:%M"))))

(defun me/date-short ()
  "Insert the current date, short format, eg. 2016.12.09."
  (interactive)
  (insert (format-time-string "%Y.%m.%d")))

(defun me/date-short-with-time ()
  "Insert the current date, short format with time, eg. 2016.12.09 14:34"
  (interactive)
  (insert (format-time-string "%Y.%m.%d %H:%M")))
#+END_SRC

Disable documentation for object at point in the echo area. It conflicts with Flycheck.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :config (global-eldoc-mode -1))
#+END_SRC

Originally, =midnight= is used to /run something at midnight/. I use its feature that
kills old buffers.

#+BEGIN_SRC emacs-lisp
(use-package midnight
  :ensure nil
  :config
  (setq-default clean-buffer-list-delay-general 1)
  (add-to-list 'clean-buffer-list-kill-never-buffer-names "dotemacs.org"))
#+END_SRC

Augment Emacs' package menu.

#+BEGIN_QUOTE
Project for modernizing Emacs' Package Menu. With improved appearance, mode-line
information. Github integration, customizability, asynchronous upgrading, and
more.

[[https://github.com/Malabarba/paradox][Artur Malabarba]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :config
  (setq-default
   paradox-column-width-package 27
   paradox-column-width-version 13
   paradox-execute-asynchronously t
   paradox-github-token t
   paradox-hide-wiki-packages t)
  (remove-hook 'paradox--report-buffer-print 'paradox-after-execute-functions))
#+END_SRC

Colorize colors as text with their value.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :init (add-hook 'prog-mode-hook #'rainbow-mode)
  :config (setq-default rainbow-x-colors-major-mode-list '()))
#+END_SRC

Turn on =auto-fill-mode= /almost/ everywhere.

#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :config
  (add-hook 'prog-mode-hook #'turn-on-auto-fill)
  (add-hook 'text-mode-hook #'turn-on-auto-fill))
#+END_SRC

** Slack

Slack integration.

- *TODO*
- *TODO*: Register teams in =.secret.el=.

#+BEGIN_SRC emacs-lisp
(use-package slack
  :config
  (setq-default
   slack-buffer-function 'switch-to-buffer
   slack-prefer-current-team t)
  (slack-register-team
   :name "fiftyfor"
   :default t
   :client-id me/fiftyfor-client-id
   :client-secret me/fiftyfor-client-secret
   :token me/fiftyfor-token
   :subscribed-channels '(dev general))
  (set-face-attribute 'slack-message-output-text nil :height 'unspecified)
  (zenburn-with-color-variables
    (set-face-attribute 'slack-message-output-header nil
                        :foreground zenburn-orange
                        :underline nil)))
#+END_SRC

** Terminal

Yes, Emacs emulates terminals too.

- **TODO**: Source =.bash_profile= on =M-x term=.
- **TODO**: Disable =hl-line=.

#+BEGIN_SRC emacs-lisp
(use-package term
  :ensure nil
  :init (add-hook 'term-mode-hook '(lambda () (setq-local scroll-margin 0))))
#+END_SRC

** Version Control

Magit provides Git facilities directly from within Emacs.

#+BEGIN_QUOTE
Magit is an interface to the version control system
[[https://git-scm.com/][Git]], implemented as an
[[https://www.gnu.org/software/emacs][Emacs]] package. Magit aspires to be a
complete Git porcelain. While we cannot (yet) claim that Magit wraps and
improves upon each and every Git command, it is complete enough to allow even
experienced Git users to perform almost all of their daily version control tasks
directly from within Emacs. While many fine Git clients exist, only Magit and
Git itself deserve to be called porcelains.
[[https://magit.vc/about.html][(more)]]

[[https://github.com/magit/magit][Jonas Bernoulli]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :preface
  (defun me/git-commit-auto-fill-everywhere ()
    (setq fill-column 72)
    (setq-local comment-auto-fill-only-comments nil))
  :init (add-hook 'git-commit-mode-hook #'me/git-commit-auto-fill-everywhere)
  :config (setq-default git-commit-summary-max-length 50))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package magit
  :preface
  (defun me/magit-display-buffer-same (buffer)
    "Display most magit popups in the current buffer."
    (display-buffer
     buffer
     (cond ((and (derived-mode-p 'magit-mode)
                 (eq (with-current-buffer buffer major-mode) 'magit-status-mode))
            nil)
           ((memq (with-current-buffer buffer major-mode)
                  '(magit-process-mode
                    magit-revision-mode
                    magit-diff-mode
                    magit-stash-mode))
            nil)
           (t '(display-buffer-same-window)))))
  :config

  ;; Use better defaults
  (setq-default
   magit-display-buffer-function 'me/magit-display-buffer-same
   magit-diff-highlight-hunk-body nil
   magit-diff-highlight-hunk-region-functions
   '(magit-diff-highlight-hunk-region-dim-outside
     magit-diff-highlight-hunk-region-using-face)
   magit-popup-display-buffer-action '((display-buffer-same-window))
   magit-refs-show-commit-count 'all
   magit-section-show-child-count t)

  ;; Customize lighters
  (delight
   '((magit-diff-mode "Magit Diff")
     (magit-log-mode "Magit Log")
     (magit-popup-mode "Magit Popup")
     (magit-status-mode "Magit Status")))

  ;; Customize faces
  (set-face-attribute 'magit-diff-file-heading-highlight nil :background nil)
  (set-face-attribute 'magit-diff-hunk-region nil :inherit 'region)
  (set-face-attribute 'magit-popup-heading nil :height me/font-size-title)
  (set-face-attribute 'magit-section-heading nil :height me/font-size-title)
  (set-face-attribute 'magit-section-highlight nil :background nil)
  (zenburn-with-color-variables
    (set-face-attribute 'magit-diff-added nil
                        :background nil
                        :foreground zenburn-green+3)
    (set-face-attribute 'magit-diff-removed nil
                        :background nil
                        :foreground zenburn-red))
  (me/unboldify '(magit-branch-local
                  magit-branch-remote
                  magit-diff-file-heading
                  magit-diff-file-heading-highlight
                  magit-popup-argument
                  magit-popup-heading
                  magit-popup-key
                  magit-popup-option-value
                  magit-refname
                  magit-refname-stash
                  magit-refname-wip
                  magit-section-heading
                  magit-section-heading-selection
                  magit-section-secondary-heading
                  magit-tag)))

(use-package gitattributes-mode :delight gitattributes-mode "Git Attributes")
(use-package gitconfig-mode :delight gitconfig-mode "Git Config")
(use-package gitignore-mode :delight gitignore-mode "Git Ignore")
#+END_SRC

** Whitespaces

Highlight space-like characters, eg. trailing spaces, tabs, empty lines.

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :demand t
  :ensure nil
  :init
  (add-hook 'prog-mode-hook #'whitespace-turn-on)
  (add-hook 'text-mode-hook #'whitespace-turn-on)
  :config (setq-default whitespace-style '(face empty tab trailing)))
#+END_SRC

** Windows

Allow repeated use of =←= and =→= when using =previous-buffer= and
=next-buffer=.

- *TODO*: Make a hydra.

#+BEGIN_SRC emacs-lisp
(defun me/switch-to-buffer-continue ()
  "Activate a sparse keymap:
  <left>   `previous-buffer'
  <right>  `next-buffer'"
  (set-transient-map
   (let ((map (make-sparse-keymap)))
     (define-key map (kbd "<left>") #'previous-buffer)
     (define-key map (kbd "<right>") #'next-buffer)
     map)))
(advice-add 'previous-buffer :after #'me/switch-to-buffer-continue)
(advice-add 'next-buffer :after #'me/switch-to-buffer-continue)
#+END_SRC

Save and restore Emacs status, including buffers, modes, point and windows.

#+BEGIN_SRC emacs-lisp
(use-package desktop
  :ensure nil
  :demand t
  :config
  (desktop-save-mode)
  (add-to-list 'desktop-globals-to-save 'golden-ratio-adjust-factor))
#+END_SRC

Workspaces within Emacs.

#+BEGIN_QUOTE
=eyebrowse= is a global minor mode for Emacs that allows you to manage your
window configurations in a simple manner, just like tiling window managers like
i3wm with their workspaces do. It displays their current state in the modeline
by default. The behaviour is modeled after
[[http://ranger.nongnu.org/][ranger]], a file manager written in Python.

[[https://github.com/wasamasa/eyebrowse][Vasilij Schneidermann]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :defer 1
  :bind
  ("<f5>" . eyebrowse-switch-to-window-config-1)
  ("<f6>" . eyebrowse-switch-to-window-config-2)
  ("<f7>" . eyebrowse-switch-to-window-config-3)
  ("<f8>" . eyebrowse-switch-to-window-config-4)
  :config
  (eyebrowse-mode)
  (setq-default eyebrowse-new-workspace t))
#+END_SRC

Adjust the size of every windows and focus the active one. It uses the
mathematical golden ratio somewhere in its formulas.

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :disabled t
  :demand t
  :preface
  (defconst me/golden-ratio-adjust-factor-bi-split .805)
  (defconst me/golden-ratio-adjust-factor-tri-split .53)
  (defun me/ediff-comparison-buffer-p ()
    (if (boundp 'ediff-this-buffer-ediff-sessions)
        (progn (balance-windows) ediff-this-buffer-ediff-sessions)))
  :config
  (golden-ratio-mode)
  (setq-default golden-ratio-adjust-factor me/golden-ratio-adjust-factor-tri-split)
  (add-to-list 'golden-ratio-exclude-modes "ediff-mode")
  (add-to-list 'golden-ratio-inhibit-functions 'me/ediff-comparison-buffer-p))
#+END_SRC

Bind commands to move around windows.

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :ensure nil
  :bind
  (("C-M-<left>". windmove-left)
   ("C-M-<right>". windmove-right)
   ("C-M-<up>". windmove-up)
   ("C-M-<down>". windmove-down)))
#+END_SRC

Allow undo's and redo's with window configurations.

#+BEGIN_QUOTE
Winner mode is a global minor mode that records the changes in the window
configuration (i.e. how the frames are partitioned into windows) so that the
changes can be "undone" using the command =winner-undo=.  By default this one is
bound to the key sequence ctrl-c left.  If you change your mind (while undoing),
you can press ctrl-c right (calling =winner-redo=).

[[https://github.com/emacs-mirror/emacs/blob/master/lisp/winner.el][Ivar Rummelhoff]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package winner
  :ensure nil
  :defer 1
  :config (winner-mode))
#+END_SRC

-----

[[#dotemacs][Back to top]]
